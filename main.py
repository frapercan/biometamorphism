import numpy as np
import pandas as pd
from Bio.pairwise2 import format_alignment

from functions import calculate_distance, calculate_identity, add_sequence_and_metadata

# Your list assigned to a variable
data_list = [
    [
        "PairID",
        "PDB_x",
        "Chain_x",
        "PDB_y",
        "Chain_y"
    ],
    [
        "1",
        "1g2c",
        "F",
        "5c6b",
        "F"
    ],
    [
        "2",
        "5ec5",
        "P",
        "3zxg",
        "B"
    ],
    [
        "3",
        "1uxm",
        "K",
        "2nam",
        "A"
    ],
    [
        "4",
        "7ahl",
        "E",
        "4yhd",
        "G"
    ],
    [
        "5",
        "5aoe",
        "B",
        "5ly6",
        "B"
    ],
    [
        "6",
        "1ova",
        "A",
        "1jti",
        "B"
    ],
    [
        "7",
        "3gmh",
        "L",
        "2vfx",
        "L"
    ],
    [
        "8",
        "3m1b",
        "F",
        "3low",
        "A"
    ],
    [
        "9",
        "3j7w",
        "B",
        "3j7v",
        "G"
    ],
    [
        "10",
        "2lqw",
        "A",
        "2bzy",
        "B"
    ],
    [
        "11",
        "5ejb",
        "C",
        "1wp8",
        "C"
    ],
    [
        "13",
        "5hmg",
        "B",
        "1htm",
        "B"
    ],
    [
        "14",
        "4j3o",
        "F",
        "2jmr",
        "A"
    ],
    [
        "15",
        "4hdd",
        "A",
        "2lep",
        "A"
    ],
    [
        "16",
        "1miq",
        "B",
        "1qs8",
        "B"
    ],
    [
        "17",
        "4nc9",
        "C",
        "4n9w",
        "A"
    ],
    [
        "18",
        "3j97",
        "M",
        "1xtg",
        "B"
    ],
    [
        "19",
        "2nao",
        "F",
        "1iyt",
        "A"
    ],
    [
        "20",
        "5c1v",
        "A",
        "5c1v",
        "B"
    ],
    [
        "21",
        "4zt0",
        "C",
        "4cmq",
        "B"
    ],
    [
        "22",
        "5jyt",
        "A",
        "2qke",
        "E"
    ],
    [
        "23",
        "2lej",
        "A",
        "2lv1",
        "A"
    ],
    [
        "24",
        "3jv6",
        "A",
        "1zk9",
        "A"
    ],
    [
        "25",
        "5k5g",
        "A",
        "2kb8",
        "A"
    ],
    [
        "26",
        "4uv2",
        "D",
        "4q79",
        "F"
    ],
    [
        "27",
        "1wyy",
        "B",
        "5wrg",
        "A"
    ],
    [
        "28",
        "5fhc",
        "J",
        "1ebo",
        "E"
    ],
    [
        "29",
        "4wsg",
        "C",
        "1svf",
        "C"
    ],
    [
        "30",
        "1nqd",
        "A",
        "1nqj",
        "B"
    ],
    [
        "31",
        "5flu",
        "E",
        "2uy7",
        "D"
    ],
    [
        "32",
        "3qy2",
        "A",
        "1qb3",
        "A"
    ],
    [
        "33",
        "2oug",
        "C",
        "2lcl",
        "A"
    ],
    [
        "34",
        "1qom",
        "B",
        "1noc",
        "A"
    ],
    [
        "35",
        "4rr2",
        "D",
        "3l9q",
        "B"
    ],
    [
        "36",
        "2ged",
        "B",
        "1nrj",
        "B"
    ],
    [
        "37",
        "5keq",
        "F",
        "1dzl",
        "A"
    ],
    [
        "38",
        "----",
        "",
        "4xws",
        "D"
    ],
    [
        "39",
        "2c1u",
        "C",
        "----",
        ""
    ],
    [
        "40",
        "4zrb",
        "C",
        "4zrb",
        "H"
    ],
    [
        "41",
        "4qhf",
        "A",
        "4qhh",
        "A"
    ],
    [
        "42",
        "4aan",
        "A",
        "4aal",
        "A"
    ],
    [
        "43",
        "1x0g",
        "A",
        "1x0g",
        "D"
    ],
    [
        "44",
        "4ae0",
        "A",
        "4ow6",
        "B"
    ],
    [
        "45",
        "1mnm",
        "C",
        "1mnm",
        "D"
    ],
    [
        "46",
        "2nnt",
        "A",
        "2mwf",
        "A"
    ],
    [
        "47",
        "4jph",
        "B",
        "5hk5",
        "H"
    ],
    [
        "48",
        "3ifa",
        "A",
        "5et5",
        "A"
    ],
    [
        "50",
        "4fu4",
        "C",
        "4g0d",
        "Z"
    ],
    [
        "51",
        "1h38",
        "D",
        "1qln",
        "A"
    ],
    [
        "52",
        "5b3z",
        "A",
        "5bmy",
        "A"
    ],
    [
        "53",
        "1xjt",
        "A",
        "1xju",
        "B"
    ],
    [
        "54",
        "3hde",
        "A",
        "3hdf",
        "A"
    ],
    [
        "55",
        "4b3o",
        "B",
        "3mee",
        "A"
    ],
    [
        "56",
        "4twa",
        "A",
        "4ydq",
        "B"
    ],
    [
        "57",
        "3ejh",
        "A",
        "3m7p",
        "A"
    ],
    [
        "58",
        "1k0n",
        "A",
        "1rk4",
        "B"
    ],
    [
        "59",
        "1xnt",
        "A",
        "3lqc",
        "A"
    ],
    [
        "60",
        "2axz",
        "A",
        "2grm",
        "B"
    ],
    [
        "61",
        "4gqc",
        "C",
        "4gqc",
        "B"
    ],
    [
        "62",
        "4o0p",
        "A",
        "4o01",
        "D"
    ],
    [
        "63",
        "4dxt",
        "A",
        "4dxr",
        "A"
    ],
    [
        "64",
        "4rwn",
        "A",
        "4rwq",
        "B"
    ],
    [
        "65",
        "2hdm",
        "A",
        "2n54",
        "B"
    ],
    [
        "66",
        "3vo9",
        "B",
        "3vpa",
        "D"
    ],
    [
        "67",
        "2p3v",
        "A",
        "----",
        ""
    ],
    [
        "68",
        "3zwg",
        "N",
        "4tsy",
        "D"
    ],
    [
        "69",
        "3ews",
        "B",
        "3g0h",
        "A"
    ],
    [
        "70",
        "3tp2",
        "A",
        "5lj3",
        "M"
    ],
    [
        "71",
        "3njq",
        "A",
        "2pbk",
        "B"
    ],
    [
        "72",
        "4rmb",
        "A",
        "4rmb",
        "B"
    ],
    [
        "73",
        "2ce7",
        "C",
        "3kds",
        "G"
    ],
    [
        "74",
        "4phq",
        "A",
        "2wcd",
        "X"
    ],
    [
        "75",
        "3t1p",
        "A",
        "1kct",
        "A"
    ],
    [
        "76",
        "3j9c",
        "A",
        "3q8f",
        "A"
    ],
    [
        "77",
        "2nxq",
        "B",
        "1jfk",
        "A"
    ],
    [
        "78",
        "5l35",
        "D",
        "5l35",
        "G"
    ],
    [
        "79",
        "5i2m",
        "A",
        "5i2s",
        "A"
    ],
    [
        "80",
        "5f3k",
        "A",
        "5f5r",
        "B"
    ],
    [
        "81",
        "4qds",
        "A",
        "2qqj",
        "A"
    ],
    [
        "82",
        "5jzh",
        "A",
        "5jzt",
        "G"
    ],
    [
        "83",
        "4pyi",
        "A",
        "----",
        ""
    ],
    [
        "84",
        "5ine",
        "A",
        "4yyp",
        "A"
    ],
    [
        "85",
        "1mby",
        "A",
        "----",
        ""
    ],
    [
        "86",
        "2a73",
        "B",
        "3l5n",
        "B"
    ],
    [
        "87",
        "2k0q",
        "A",
        "2lel",
        "A"
    ],
    [
        "88",
        "3uyi",
        "A",
        "----",
        ""
    ],
    [
        "89",
        "4a5w",
        "B",
        "3t5o",
        "A"
    ],
    [
        "90",
        "1rkp",
        "A",
        "----",
        ""
    ],
    [
        "91",
        "1cee",
        "B",
        "2k42",
        "A"
    ],
    [
        "92",
        "3o44",
        "A",
        "1xez",
        "A"
    ],
    [
        "93",
        "1rep",
        "C",
        "2z9o",
        "B"
    ],
    [
        "94",
        "3kuy",
        "A",
        "5c3i",
        "F"
    ],
    [
        "95",
        "2n0a",
        "D",
        "2kkw",
        "A"
    ],
    [
        "96",
        "4m4r",
        "A",
        "4w50",
        "B"
    ]
]

# Split the headers and the data
headers = data_list[0]
data = data_list[1:]

# Create the DataFrame
df = pd.DataFrame(data, columns=headers)

df['PDB_x'] = df['PDB_x'].str.upper()
df['PDB_y'] = df['PDB_y'].str.upper()


# Drop rows with any NaN values
df.replace('----', np.nan, inplace=True)
df.dropna(how='any', inplace=True)
df.to_csv('data.csv')

from Bio import PDB, pairwise2


fields = ['name', 'head', 'structure_method', 'resolution','source','keywords']
metadata_columns = fields
# Function to get sequence from PDB ID and chain
df = df.apply(lambda row: add_sequence_and_metadata(row, 'x', metadata_columns), axis=1)
df = df.apply(lambda row: add_sequence_and_metadata(row, 'y', metadata_columns), axis=1)


# Add sequences to DataFrame
df['len(Sequence_x)'] = df.apply(lambda row: len(row['Sequence_x']), axis=1)
df['len(Sequence_y)'] = df.apply(lambda row: len(row['Sequence_y']), axis=1)

# # Add percentage of identity to DataFrame
df['Identity_Percentage'] = df.apply(lambda row: calculate_identity(row['Sequence_x'], row['Sequence_y']), axis=1)



columns_reposition_end = [field + '_x' for field in fields] + [field + '_y' for field in fields]

columns_reposition_end_df = df[columns_reposition_end]
# Asegúrate de que las columnas que deseas mover al final existan en el DataFrame
columns_reposition_end = [col for col in columns_reposition_end if col in df.columns]

# Elimina las columnas que quieres mover al final
df.drop(columns=columns_reposition_end, inplace=True)

# Ordena las columnas que deseas reubicar alfabéticamente
columns_reposition_end.sort()  # La lista se ordena in place

# Agrega las columnas ordenadas de nuevo al DataFrame, al final del mismo
for col in columns_reposition_end:
    df[col] = columns_reposition_end_df[col]

# Guarda el DataFrame en un archivo CSV
df.to_csv('data_comparison.csv',index=False)